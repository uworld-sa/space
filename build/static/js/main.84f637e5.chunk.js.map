{"version":3,"sources":["components/spaceSystem.js","components/Gui.js","example/example.js","components/Game.js","App.js","serviceWorker.js","index.js"],"names":["spaceSystem","scene","camera","renderer","params","Object","classCallCheck","this","G","dt","grid","sizeArea","divisions","game","assign","objects","gridHelper","starsGeometry","THREE","starsMaterial","color","sizeAttenuation","i","star","x","Math","random","y","z","multiplyScalar","vertices","push","stars","scale","set","add","userData","ind","precalculate","geometry","radius","needResize","undefined","texture","load","material","map","three","position","remove","visible","showGrid","setValues","scaleSize","obj","obj2","R","distanceTo","weight","pow","vx","vy","vz","Fx","Fy","Fz","ind2","calculateFx","calculateFy","calculateFz","Gui","props","_this","possibleConstructorReturn","getPrototypeOf","call","handleUpdate","bind","assertThisInitialized","handleUpdateObject","hex","result","exec","r","parseInt","g","b","value","key","onGuiChange","concat","red","green","blue","buttonPlay","_this2","colors","getHexString","hexToRgb","play","react_default","a","createElement","lib","label","onClick","expanded","onChange","min","max","step","onFinishChange","checked","object","name","Component","example","OrbitControls","OrbitControlsLib","Game","data","state","console","log","frameId","start","stop","setState","space","updateSpace","updateArea","requestAnimationFrame","animate","cancelAnimationFrame","calculateMotions","count","renderScene","render","resizeWindow","width","container","clientWidth","height","clientHeight","aspect","updateProjectionMatrix","setSize","throttle","antialias","orbit","domElement","enableZoom","enableKeys","initMiniStars","initObjects","appendChild","window","addEventListener","far","removeChild","removeEventListener","className","ref","Gui_Gui","App","Game_Game","Boolean","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.84f637e5.chunk.js","sourcesContent":["import * as THREE from 'three'\r\nexport default class spaceSystem {\r\n\r\n    constructor(scene, camera, renderer, params) {\r\n        this.G = params.G; // gravitational constant\r\n        this.dt = params.dt; //0.005 years is equal to 1.825 days\r\n        this.grid = params.sizeArea;\r\n        this.divisions = params.divisions\r\n        this.scene = scene;\r\n        this.camera = camera;\r\n        this.renderer = renderer;\r\n        this.game = Object.assign({}, params.objects);\r\n        this.params = params;\r\n        this.gridHelper = {};\r\n    }\r\n\r\n    initMiniStars() {\r\n        //add stars\r\n        let starsGeometry = new THREE.Geometry();\r\n        let starsMaterial = new THREE.PointsMaterial({\r\n            color: 0xbbbbbb,\r\n            sizeAttenuation: false\r\n        });\r\n\r\n        for (let i = 0; i < 45000; i++) {\r\n            let star = new THREE.Vector3();\r\n            star.x = Math.random() * 2 - 1;\r\n            star.y = Math.random() * 2 - 1;\r\n            star.z = Math.random() * 2 - 1;\r\n            star.multiplyScalar(this.params.sizeArea / 2);\r\n            starsGeometry.vertices.push(star);\r\n        }\r\n\r\n        let stars = new THREE.Points(starsGeometry, starsMaterial);\r\n        stars.scale.set(50, 50, 50);\r\n        this.scene.add(stars);\r\n\r\n        this.gridHelper = new THREE.GridHelper(this.grid, this.divisions);\r\n        this.gridHelper.userData = {grid:this.grid,divisions:this.divisions};\r\n        this.scene.add( this.gridHelper );\r\n    }\r\n\r\n    initObjects() {\r\n        for (let ind in this.game) {\r\n            // create elements\r\n            this.game[ind].precalculate = {};\r\n            this.game[ind].geometry = new THREE.SphereGeometry(this.game[ind].radius * this.game[ind].needResize, 40, 40);\r\n            if (this.game[ind].texture !== undefined) {\r\n                let texture = new THREE.TextureLoader().load( this.game[ind].texture );\r\n                this.game[ind].material = new THREE.MeshBasicMaterial( { map: texture }  );\r\n            } else {\r\n                this.game[ind].material = new THREE.MeshBasicMaterial({\r\n                    color: this.game[ind].color\r\n                });\r\n            }\r\n            this.game[ind].three = new THREE.Mesh(this.game[ind].geometry, this.game[ind].material);\r\n            this.game[ind].three.userData = {radius:this.game[ind].radius,needResize:this.game[ind].needResize};\r\n            this.game[ind].three.position.x = this.game[ind].x;\r\n            this.game[ind].three.position.y = this.game[ind].y;\r\n            this.game[ind].three.position.z = this.game[ind].z;\r\n            this.scene.add(this.game[ind].three);\r\n        }\r\n    }\r\n\r\n    updateSpace(params) {\r\n        this.dt = params.dt;\r\n        if (this.gridHelper.userData.grid !== params.sizeArea || this.gridHelper.userData.divisions !== params.divisions) {\r\n            this.scene.remove(this.gridHelper);\r\n            this.gridHelper = new THREE.GridHelper(params.sizeArea, params.divisions);\r\n            this.gridHelper.userData = {grid:params.sizeArea,divisions:params.divisions};\r\n            this.scene.add( this.gridHelper );\r\n        }\r\n        this.gridHelper.visible = params.showGrid;\r\n        for (let ind in this.game) {\r\n            if (params.objects[ind].texture === undefined) {\r\n                let color = new THREE.Color(params.objects[ind].color);\r\n                this.game[ind].color = params.objects[ind].color;\r\n                this.game[ind].three.material.setValues({color});\r\n            }\r\n            let scaleSize = params.objects[ind].radius*params.objects[ind].needResize/params.objects[ind].three.userData.radius/params.objects[ind].three.userData.needResize;\r\n            this.game[ind].three.scale.set(scaleSize, scaleSize, scaleSize);\r\n        }\r\n    }\r\n\r\n    calculateFx(obj, obj2) {\r\n        let R = obj.three.position.distanceTo(obj2.three.position); // sqrt(pow((x1-x2),2) + pow((y1-y2),2) + pow((z1-z2),2))\r\n        return this.G * obj2.weight / Math.pow(R, 3) * (obj2.three.position.x - obj.three.position.x);\r\n    }\r\n\r\n    calculateFy(obj, obj2) {\r\n        let R = obj.three.position.distanceTo(obj2.three.position); // sqrt(pow((x1-x2),2) + pow((y1-y2),2) + pow((z1-z2),2))\r\n        return this.G * obj2.weight / Math.pow(R, 3) * (obj2.three.position.y - obj.three.position.y);\r\n    }\r\n\r\n    calculateFz(obj, obj2) {\r\n        let R = obj.three.position.distanceTo(obj2.three.position); // sqrt(pow((x1-x2),2) + pow((y1-y2),2) + pow((z1-z2),2))\r\n        return this.G * obj2.weight / Math.pow(R, 3) * (obj2.three.position.z - obj.three.position.z);\r\n    }\r\n\r\n    calculateMotions() {\r\n        for (let ind in this.game) {\r\n            this.game[ind].three.position.x += this.game[ind].vx * this.dt;\r\n            this.game[ind].three.position.y += this.game[ind].vy * this.dt;\r\n            this.game[ind].three.position.z += this.game[ind].vz * this.dt;\r\n        }\r\n        for (let ind in this.game) {\r\n            let Fx = 0;\r\n            let Fy = 0;\r\n            let Fz = 0;\r\n            for (let ind2 in this.game) {\r\n                if (ind !== ind2) {\r\n                    Fx += this.calculateFx(this.game[ind],this.game[ind2]);\r\n                    Fy += this.calculateFy(this.game[ind],this.game[ind2]);\r\n                    Fz += this.calculateFz(this.game[ind],this.game[ind2]);\r\n                }\r\n            }\r\n            this.game[ind].precalculate = {Fx,Fy,Fz};\r\n        }\r\n\r\n        for (let ind in this.game) {\r\n            this.game[ind].vx += this.game[ind].precalculate.Fx * this.dt;\r\n            this.game[ind].vy += this.game[ind].precalculate.Fy * this.dt;\r\n            this.game[ind].vz += this.game[ind].precalculate.Fz * this.dt;\r\n        }\r\n    }\r\n}","import React, {\r\n    Component\r\n} from 'react'\r\nimport * as THREE from 'three'\r\nimport * as dg from 'dis-gui';\r\n\r\nexport default class Gui extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleUpdate = this.handleUpdate.bind(this);\r\n        this.handleUpdateObject = this.handleUpdateObject.bind(this);\r\n    }\r\n\r\n    hexToRgb(hex) {\r\n        var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n        return result ? {\r\n            r: parseInt(result[1], 16),\r\n            g: parseInt(result[2], 16),\r\n            b: parseInt(result[3], 16)\r\n        } : null;\r\n    }\r\n\r\n    handleUpdate(value,key) {\r\n        let params = Object.assign({}, this.props.params);\r\n        params[key] = value;\r\n        this.props.onGuiChange(params);\r\n    }\r\n    handleUpdateObject(value,key,ind) {\r\n        let params = Object.assign({}, this.props.params);\r\n        if (key === 'color') {\r\n            params.objects[ind][key] = `rgb(${value.red}, ${value.green}, ${value.blue})`;\r\n        } else {\r\n            params.objects[ind][key] = value;\r\n        }\r\n        this.props.onGuiChange(params);\r\n    }\r\n\r\n    render() {\r\n        const params = this.props.params;\r\n        let colors = {};\r\n        for (let ind in params.objects) {\r\n            let color = new THREE.Color( params.objects[ind].color ).getHexString();\r\n            colors[ind] = this.hexToRgb('#'+color);\r\n        }\r\n        let buttonPlay;\r\n\r\n        if (params.play) {\r\n            buttonPlay = <dg.Button label='Stop animation' onClick={() => this.handleUpdate(!params.play,'play')}/>;\r\n        } else {\r\n            buttonPlay = <dg.Button label='Play animation' onClick={() => this.handleUpdate(!params.play,'play')}/>;\r\n        }\r\n        return (\r\n            <dg.GUI expanded={false}>\r\n                {buttonPlay}\r\n\r\n                <dg.Number\r\n                    label='dt' value={params.dt}\r\n                    onChange={ (value) => this.handleUpdate(value,'dt')}\r\n                />\r\n                <dg.Number\r\n                    label='Размер космоса'\r\n                    value={params.sizeArea}\r\n                    onChange={ (value) => this.handleUpdate(value,'sizeArea')}\r\n                />\r\n                <dg.Number\r\n                    label='Размер сетки'\r\n                    value={params.divisions}\r\n                    min={5}\r\n                    max={200}\r\n                    step={1}\r\n                    onFinishChange={ (value) => this.handleUpdate(value,'divisions')}\r\n                />\r\n                <dg.Checkbox\r\n                    label='Показать сетку'\r\n                    checked={params.showGrid}\r\n                    onChange={ (value) => this.handleUpdate(value,'showGrid')}\r\n                />\r\n                {params.objects.map((object, i) => {\r\n                    return (\r\n                    <dg.Folder key={i} label={object.name} expanded={false}>\r\n                        <dg.Number\r\n                            label='Масса кг'\r\n                            value={object.weight}\r\n                            onChange={ (value) => this.handleUpdateObject(value,'weight',i)}\r\n                        />\r\n                        <dg.Number\r\n                            label='Радиус км'\r\n                            value={object.radius}\r\n                            onChange={ (value) => this.handleUpdateObject(value,'radius',i)}\r\n                        />\r\n                        <dg.Number\r\n                            label='Умножитель радиуса'\r\n                            value={object.needResize}\r\n                            step={1}\r\n                            onChange={ (value) => this.handleUpdateObject(value,'needResize',i)}\r\n                        />\r\n                        {(() => {\r\n                            if(object.material === undefined) {\r\n                                return <dg.Color\r\n                                    label='Color'\r\n                                    expanded={false}\r\n                                    red={colors[i].r}\r\n                                    green={colors[i].g}\r\n                                    blue={colors[i].b}\r\n                                    onFinishChange={ (value) => this.handleUpdateObject(value,'color',i)}\r\n                                />\r\n                            }\r\n                        })()}\r\n                    </dg.Folder>);\r\n                }\r\n                )}\r\n            </dg.GUI>\r\n        )\r\n    }\r\n}","// based on https://ssd.jpl.nasa.gov/horizons.cgi?s_target=1#top \r\nlet example = {\r\n    G: 6.67408e-11 / 1000,\r\n    dt:365,\r\n    sizeArea: 3000000000,\r\n    divisions: 10,\r\n    camera: {\r\n        x:0,\r\n        y:0,\r\n        z: 300000000\r\n    },\r\n    objects :[{\r\n        name: \"Sun\", \r\n        weight: 1988500e+24,\r\n        radius: 695700,\r\n        needResize: 10,\r\n        texture: 'images/textures/sunmap.jpg',\r\n        color: 'rgb(255, 0, 0)',\r\n        x: -2.256354271511951e+5,\r\n        y: 1.132679762573425e+6,\r\n        z: -5.672921174540708e+3,\r\n        vx: -1.435872953662852E+1,\r\n        vy: 1.779506244485902E+0,\r\n        vz: 3.737310085128446E-1\r\n    },{\r\n        name: \"Mercury\",\r\n        weight: 3.302e+23,\r\n        radius: 2440,\r\n        needResize: 1000,\r\n        texture: 'images/textures/mercurymap.jpg',\r\n        color: 'rgb(255, 0, 0)',\r\n        x: -3.486464851120884e+7,\r\n        y: -5.850284147890126e+7,\r\n        z: -1.701007796612002e+6,\r\n        vx: 3.228266436261626E+4,\r\n        vy: -2.213163560944330E+4,\r\n        vz: -4.771073247910603E+3\r\n    },{\r\n        name: \"Venus\",\r\n        weight: 48.685e+23,\r\n        radius: 6051.84,\r\n        needResize: 1000,\r\n        texture: 'images/textures/venusmap.jpg',\r\n        color: 'rgb(255, 0, 0)',\r\n        x: 3.558127444818084e+7,\r\n        y: -1.016343722230160e+8,\r\n        z: -3.482094754754119e+6,\r\n        vx: 3.282140342104274E+4,\r\n        vy: 1.140662710741241E+4,\r\n        vz: -1.738009831561365E+3\r\n    },{\r\n        name: \"Earth\",\r\n        weight: 5.97219e+24,\r\n        radius: 6371.01,\r\n        needResize: 1000,\r\n        texture: 'images/textures/earthmap.jpg',\r\n        color: 'rgb(255, 0, 0)',\r\n        x: -1.455733460945613e+8,\r\n        y: -3.424162575340020e+7,\r\n        z: -3.267683441041037e+3,\r\n        vx: 6.544943881962406E+3,\r\n        vy: -2.906606810798772E+4,\r\n        vz: 2.081526418331592E+0\r\n    },{\r\n        name: \"Mars\",\r\n        weight: 6.4171e+23,\r\n        radius: 3389.92,\r\n        needResize: 1000,\r\n        texture: 'images/textures/marsmap.jpg',\r\n        color: 'rgb(255, 0, 0)',\r\n        x: -3.128784983630511e+6,\r\n        y: 2.361318353647656e+8,\r\n        z: 4.989613765306219e+6,\r\n        vx: -2.332648762922359E+4,\r\n        vy: 1.760987944467660E+3,\r\n        vz: 6.092406675678612E+2\r\n    }\r\n    ]\r\n}\r\nexport default example;","import React, { Component } from 'react'\r\nimport * as THREE from 'three'\r\nimport OrbitControlsLib from 'three-orbit-controls'\r\nimport throttle from 'lodash/throttle'\r\nimport spaceSystem from './spaceSystem'\r\nimport './Game.css'\r\nimport Gui from './Gui.js'\r\nimport example from '../example/example'\r\n\r\nconst OrbitControls = OrbitControlsLib(THREE);\r\n\r\nexport default class Game extends Component { \r\n    constructor(props) {\r\n        super(props);\r\n        let params = Object.assign({}, example);\r\n        params.showGrid = true;\r\n        params.play = true;\r\n        this.state = {\r\n            params: Object.assign({}, params)\r\n        }\r\n        this.onGuiChange = this.onGuiChange.bind(this);\r\n       \r\n        this.resizeWindow = throttle(this.resizeWindow, 300);\r\n        this.space = {}\r\n    }\r\n\r\n    onGuiChange = data => {\r\n        if (this.state.play !== data.play) {\r\n            console.log(this.frameId);\r\n            if (data.play) {\r\n                this.start();\r\n                console.log('start');\r\n            } else {\r\n                this.stop();\r\n                console.log('stop');\r\n            }\r\n        }\r\n        this.setState({\r\n            params:data\r\n        });\r\n        this.space.updateSpace(data);\r\n        this.updateArea(data);\r\n    }\r\n\r\n    componentDidMount() {\r\n        let width = this.container.clientWidth,\r\n            height = this.container.clientHeight;\r\n\r\n        this.scene = new THREE.Scene();\r\n        this.camera = new THREE.PerspectiveCamera(75, width / height, 0.1, this.state.params.sizeArea);\r\n        this.camera.position.x = this.state.params.camera.x;\r\n        this.camera.position.y = this.state.params.camera.y;\r\n        this.camera.position.z = this.state.params.camera.z;\r\n\r\n        this.renderer = new THREE.WebGLRenderer({\r\n            antialias: true\r\n        });\r\n        this.renderer.setSize(width, height);\r\n        this.orbit = new OrbitControls(this.camera, this.renderer.domElement);\r\n        this.orbit.enableZoom = true;\r\n        this.orbit.enableKeys = false;\r\n\r\n        this.space = new spaceSystem(this.scene, this.camera, this.renderer, this.state.params);\r\n        this.space.initMiniStars();\r\n        this.space.initObjects();\r\n\r\n        this.container.appendChild(this.renderer.domElement);\r\n        this.start();\r\n        window.addEventListener(\"resize\", this.resizeWindow);\r\n\r\n    }\r\n\r\n    updateArea(data) {\r\n        if (this.camera.far !== data.sizeArea) {\r\n            this.camera.far = data.sizeArea;\r\n            this.camera.updateProjectionMatrix();\r\n        }\r\n    }\r\n\r\n    start = () => {\r\n        if (!this.frameId) {\r\n            this.frameId = requestAnimationFrame(this.animate);\r\n        }\r\n    };\r\n\r\n    stop = () => {\r\n        cancelAnimationFrame(this.frameId);\r\n        this.frameId = false;\r\n    };\r\n\r\n    animate = () => {\r\n        this.space.calculateMotions();\r\n        this.count++;\r\n        \r\n        this.renderScene();\r\n        this.frameId = requestAnimationFrame(this.animate);\r\n    };\r\n\r\n    renderScene = () => {\r\n        this.renderer.render(this.scene, this.camera);\r\n    };\r\n\r\n    resizeWindow = () => {\r\n        let width = this.container.clientWidth,\r\n            height = this.container.clientHeight;\r\n        this.camera.aspect = width / height;\r\n        this.camera.updateProjectionMatrix();\r\n        this.renderer.setSize(width, height);\r\n    };\r\n\r\n    componentWillUnmount() {\r\n        this.stop();\r\n        this.container.removeChild(this.renderer.domElement);\r\n        window.removeEventListener(\"resize\", this.resizeWindow);\r\n    }\r\n\r\n    render() {\r\n        const {\r\n            params\r\n        } = this.state;\r\n        return (\r\n            <div className = 'threejs-app' >\r\n                <div className = 'scene'\r\n                    ref = {\r\n                        container => this.container = container\r\n                    }\r\n                />\r\n                <Gui params = { params }\r\n                    onGuiChange = {\r\n                        this.onGuiChange\r\n                    }\r\n                >\r\n                </Gui>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Game from './components/Game.js'\r\n\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Game></Game>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}